generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String?
  authorId    String
  schedules   Schedule[]
  boards      Board[]
  notes       Note[]

  @@unique([title, authorId])
}

model Schedule {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  events      Event[]
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([title, projectId])
}

model Event {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  description  String?
  startsAt     DateTime
  endsAt       DateTime
  notification Notification?
  schedule     Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   String

  @@unique([title, scheduleId])
}

model Notification {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  title             String
  description       String?
  startsAt          DateTime
  isActive          Boolean            @default(true)
  isSent            Boolean            @default(false)
  event             Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId           String             @unique
  pushSubscriptions PushSubscription[]
}

model PushSubscription {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  entity         Json
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
}

model Board {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  statuses    Status[]
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([title, projectId])
}

model Status {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  rank        String
  issues      Issue[]
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String

  @@unique([title, boardId])
  @@unique([rank, boardId])
}

model Issue {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  rank        String
  priorities  String[]
  attachments Bytes[]
  status      Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId    String

  @@unique([rank, statusId])
}

model Note {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  content     Json
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([title, projectId])
}
