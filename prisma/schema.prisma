generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String?
  authorId    String
  schedules   Schedule[]
  boards      Board[]
  notes       Note[]

  @@unique([title, authorId])
}

model Schedule {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  events      Event[]
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([title, projectId])
}

enum Color {
  BLUE
  ORANGE
  PURPLE
  TEAL
}

model Event {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  description  String?
  startsAt     DateTime
  endsAt       DateTime
  color        Color         @default(BLUE)
  notification Notification?
  schedule     Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   String

  @@unique([title, scheduleId])
}

model Notification {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  startsAt    DateTime
  isActive    Boolean  @default(true)
  isSent      Boolean  @default(false)
  authorId    String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String   @unique
}

model PushSubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    Json
  authorId  String
}

model Board {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  issues      Issue[]
  statuses    Status[]
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([title, projectId])
}

model Status {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  rank        String
  issues      Issue[]
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String

  @@unique([title, boardId])
  @@unique([rank, boardId])
}

enum Priority {
  TRIVIAL
  MINOR
  LOW
  MEDIUM
  HIGH
  MAJOR
  CRITICAL
}

model Issue {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  rank        String
  priority    Priority
  attachments Bytes[]
  status      Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId    String
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String

  @@unique([title, boardId])
  @@unique([rank, statusId])
}

model Note {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  content     Json
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@unique([title, projectId])
}
